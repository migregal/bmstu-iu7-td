{
	"info": {
		"_postman_id": "5eb1dc81-edad-4228-95d5-4cc0b9a416eb",
		"name": "regress",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "16256001-5eb1dc81-edad-4228-95d5-4cc0b9a416eb"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2103c46b-8d34-41b1-86d5-9244952aeb6d",
										"exec": [
											"pm.test(\"Status code is 307\", function () {",
											"    pm.expect(pm.response).to.have.status(307);",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.expect(pm.response).to.not.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"pm.test('Redirected to /api/v1/auth/login', function () {",
											"    pm.expect(pm.response).to.not.be.withBody;",
											"",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.be.eql('/api/v1/auth/login')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c4e20df4-ab20-4674-8b04-b331b5fda8e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/registration",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "registration: already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2103c46b-8d34-41b1-86d5-9244952aeb6d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'user already exists'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql(\"user already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f26bc3be-8333-4fbe-b594-9f2aec64eb13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/registration",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e4df16-0e50-4d34-bba1-2cd9219ffab9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"id\": \"int\",",
											"        \"token\": \"string\"",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.environment.set(\"token\", pm.response.json().data.token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2542104b-247f-48b7-849e-523af8db9805",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/login",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login: doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e4df16-0e50-4d34-bba1-2cd9219ffab9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'user doesn\\'t exists'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql(\"user doesn't exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2e6c401-4cd2-45b3-99c2-b2437bd618d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"invalid_{{login}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/login",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login: invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e4df16-0e50-4d34-bba1-2cd9219ffab9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"password\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'incorrect'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.password).to.eql(\"incorrect\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0db7e20b-d7b6-4023-94a3-9d46123a409a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}_123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/login",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login: empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e4df16-0e50-4d34-bba1-2cd9219ffab9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"login\": \"string\",",
											"        \"password\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'incorrect'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.login).to.eql(\"invalid\");",
											"    pm.expect(jsonData.errors.password).to.eql(\"empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "610384ec-bcdc-4f7e-beeb-f2dcc1dd0a67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/login",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout: ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b62eed87-a9c9-47f1-b605-46ac3b661fc6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.expect(pm.response).to.not.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.not.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2dc51534-c370-4429-a410-8bcc53edbbc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/logout",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout: no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b62eed87-a9c9-47f1-b605-46ac3b661fc6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'unauthorized'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql('unauthorized');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c20fdf8c-49eb-4bc0-ad4a-e0748771eb0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImFzZGFzZEBtYWlsLnJ1IiwiaWQiOjEsImV4cCI6MTY3OTczMzgxNSwiaWF0IjoxNjc5NDc0NjE1fQ.uUbeK27bxqxq7krZQd0SNB3VRAYJtC9lX_f_-xqeZYM",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/auth/logout",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"id": "e7015c9e-81b1-4482-8113-6290a07d4366"
				},
				{
					"name": "files",
					"item": [
						{
							"name": "add",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a79a447-299a-406b-871f-386d0437113a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 150ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(150);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"id\": \"string\",",
											"        \"url\": \"string\"",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.environment.set(\"file_id\", pm.response.json().data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "86f29e18-881b-4435-8a55-f101bd086df9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "some page",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "test.md"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/add",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "add: no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a79a447-299a-406b-871f-386d0437113a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'unauthorized'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql('unauthorized');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0427eefb-e326-473d-9d7a-5b9b10447d7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "some page",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "test.md"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/add",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5861fe27-78f9-4c7f-86cc-29e1c3e1fc19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"files\": [",
											"            {",
											"                \"id\": \"string\",",
											"                \"title\": \"string\",",
											"                \"length\": \"int\",",
											"                \"url\": \"string\"",
											"            }",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test('Added file id present', function () {",
											"    const file = pm.response.json().data.files.find((item) => {",
											"        item.id === pm.environment.get(\"file_id\")",
											"    });",
											"    pm.expect(file).to.be.not.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "860632c2-d58b-435e-9d32-7db40303600e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/get",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"get"
									],
									"query": [
										{
											"key": "format",
											"value": "md",
											"disabled": true
										},
										{
											"key": "style",
											"value": "bulma",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get: bulma",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5861fe27-78f9-4c7f-86cc-29e1c3e1fc19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.to.have.status(200));",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response.to.have.header(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response.to.be.withBody);",
											"    pm.expect(pm.response.to.be.string);",
											"});",
											"",
											"pm.test('Added file id present', function () {",
											"    pm.expect(pm.response.text()).to.match(/<link rel=\"stylesheet\" href=\"https:\\/\\/cdn\\.jsdelivr\\.net\\/npm\\/bulma@[0-9]+.[0-9]+.[0-9]+\\/css\\/bulma.min.css\">/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "afcbdf84-6d97-4a10-b490-3dabd2f61841",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/get/{{file_id}}?style=bulma",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"get",
										"{{file_id}}"
									],
									"query": [
										{
											"key": "format",
											"value": "md",
											"disabled": true
										},
										{
											"key": "style",
											"value": "bulma"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get: pico",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5861fe27-78f9-4c7f-86cc-29e1c3e1fc19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.to.have.status(200));",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response.to.have.header(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response.to.be.withBody);",
											"    pm.expect(pm.response.to.be.string);",
											"});",
											"",
											"pm.test('Added file id present', function () {",
											"    pm.expect(pm.response.text()).to.match(/<link rel=\"stylesheet\" href=\"https:\\/\\/unpkg.com\\/@picocss\\/pico@[0-9]+.[0-9]+.[0-9]+\\/css\\/pico.min.css\">/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "72a75590-bb22-4d3b-a4d3-bf198579d05b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/get/{{file_id}}?style=pico",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"get",
										"{{file_id}}"
									],
									"query": [
										{
											"key": "format",
											"value": "md",
											"disabled": true
										},
										{
											"key": "style",
											"value": "pico"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get: invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5861fe27-78f9-4c7f-86cc-29e1c3e1fc19",
										"exec": [
											"pm.test(\"Status code is 307\", function () {",
											"    pm.expect(pm.response).to.have.status(307);",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.expect(pm.response).to.not.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"pm.test('Redirected to /404', function () {",
											"    pm.expect(pm.response).to.not.be.withBody;",
											"",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.be.eql('/404')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "329d22af-39c0-4067-b542-a0f3cd49e695",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/get/undefined",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"get",
										"undefined"
									],
									"query": [
										{
											"key": "format",
											"value": "md",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get: no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5861fe27-78f9-4c7f-86cc-29e1c3e1fc19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'unauthorized'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql('unauthorized');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b3cc47f4-8b83-4b79-b3fb-b1674b2ff33c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/get",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"get"
									],
									"query": [
										{
											"key": "format",
											"value": "md",
											"disabled": true
										},
										{
											"key": "style",
											"value": "bulma",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "upd",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b51b1ea0-c474-4cc0-904c-e8d96f834f89",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"id\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"",
											"    pm.expect(pm.response.json().data.id).to.be.not.null;",
											"    pm.expect(pm.response.json().data.id).to.be.string;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7a20d38c-45b2-4d3e-8199-5cf3883887bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "some another page 2",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "test.md"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/upd/{{file_id}}",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upd",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upd: title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b51b1ea0-c474-4cc0-904c-e8d96f834f89",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"id\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"",
											"    pm.expect(pm.response.json().data.id).to.be.not.null;",
											"    pm.expect(pm.response.json().data.id).to.be.string;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4ff65d21-fbd6-496b-bd27-3a362f87e9ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "some another page 2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/upd/{{file_id}}",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upd",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upd: file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b51b1ea0-c474-4cc0-904c-e8d96f834f89",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"id\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"",
											"    pm.expect(pm.response.json().data.id).to.be.not.null;",
											"    pm.expect(pm.response.json().data.id).to.be.string;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b9230021-e4e1-4db2-8183-838abb44884d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "test.md"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/upd/{{file_id}}",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upd",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upd: invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b51b1ea0-c474-4cc0-904c-e8d96f834f89",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"id\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test('Error is correct', function () {",
											"    pm.expect(pm.response.json().errors.id).to.eql('invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ab5fb35d-d686-48ad-9e12-5eefd7ae2892",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "some another page 2",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "test.md"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/upd/undefined",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upd",
										"undefined"
									]
								}
							},
							"response": []
						},
						{
							"name": "upd: no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a64246a-33a7-4a2c-bafe-004466fab67e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'unauthorized'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql('unauthorized');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7024b7ca-1375-451c-a0e8-6b98e40b839e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "some another page 2",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "test.md"
										}
									]
								},
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/upd/{{file_id}}",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upd",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "del",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e3c6c55-7fba-4c71-b274-3ef2096c4dec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"data\": {",
											"        \"id\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"",
											"    pm.expect(pm.response.json().data.id).to.be.not.null;",
											"    pm.expect(pm.response.json().data.id).to.be.string;",
											"});",
											"",
											"pm.environment.unset(\"file_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2fa4f5f3-771e-4342-a253-a9ba64712493",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/del/{{file_id}}",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"del",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "del: invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e60203e-6834-445c-bdc2-9158f90398b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.expect(pm.response).to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"id\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(pm.response).to.be.withBody;",
											"    pm.expect(pm.response).to.be.json;",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test('Error is correct', function () {",
											"    pm.expect(pm.response.json().errors.id).to.eql('invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "62c79cc6-101d-46f2-976d-b7c7cc865c74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/del/undefined",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"del",
										"undefined"
									]
								}
							},
							"response": []
						},
						{
							"name": "del: no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e60203e-6834-445c-bdc2-9158f90398b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(75);",
											"});",
											"",
											"var schema = {",
											"    \"errors\": {",
											"        \"default\": \"string\",",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error is 'unauthorized'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.default).to.eql('unauthorized');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4ca1118f-5861-4725-82a9-9fbdf35253ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{proto}}://{{host_url}}/api/v1/files/del/undefined",
									"protocol": "{{proto}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"del",
										"undefined"
									]
								}
							},
							"response": []
						}
					],
					"id": "3fbbfd26-2f63-4aa0-b6cd-595b1524f1fe"
				}
			],
			"id": "e97100d1-f5c8-48dc-8319-16e32b60717e"
		}
	]
}